#+TITLE: Plans for groph
#+ARCHIVE: ::* Archive

Plans for groph are documented in this file to keep the project
independent from specific VCS hosting platforms. … Why? – See “The
Mission” on [[https://blog.codeberg.org/codebergorg-launched.html][codeberg.org]].

* TODO Restructure Packaging
Restructuring should help to solve the subtasks
[[./docs/architecture.svg]]

** TODO Move graph implementations to separate packages
 - This could make for a nicer API
 - General graph test could (hopefully) be made available also to
   external graph implementations

 *Problem:* Tests for groph package require graph implementations →
 cyclic dependencies.

** TODO Subpackages in util for clear API naming
 Adapt to the Go convention of using the package name for clear
 identification. E.g.:

 Have
 #+BEGIN_SRC go
   dot := graphviz.Dot{
	   PerNodeAtts: func(g groph.RGraph, v groph.VIdx) graphviz.Atts {
		   res := graphviz.Atts{"label": fmt.Sprintf("%c / %d", 'a'+v, v)}
		   if v == mst.Root() {
			   res["shape"] = "diamond"
		   }
		   return res
	   }
   }
 #+END_SRC
 instead of
 #+BEGIN_SRC go
   dot := util.GraphViz{
	   PerNodeAtts: func(g groph.RGraph, v groph.VIdx) util.GvAtts {
		   res := util.GvAtts{"label": fmt.Sprintf("%c / %d", 'a'+v, v)}
		   if v == mst.Root() {
			   res["shape"] = "diamond"
		   }
		   return res
	   }
   }
 #+END_SRC

* TODO Adhere to Graph Theory Terms
see [[https://en.wikipedia.org/wiki/Glossary_of_graph_theory_terms][Wikipedia]]

* TODO Decide on keeping type VIdx
The original idea of VIdx was to be able to change to uint, just in
case. Currently some algorithms are base on VIdx being a signed type.
=> Would the API nicer when we drop VIdx?

Even if not VIdx is use in many place where it does not denote a
Vertext, e.g. for ord parameters. Using VIdx for vertices only would
give VIdx a good documentation aspect.

* Archive                                                           :ARCHIVE:

** DONE Change Visited att of traversal.Search from Bitset to Heap
   :PROPERTIES:
   :ARCHIVE_TIME: 2020-01-05 So 13:12
   :ARCHIVE_FILE: ~/gows/src/git.fractalqb.de/fractalqb/groph/PLAN.org
   :ARCHIVE_CATEGORY: PLAN
   :ARCHIVE_TODO: DONE
   :END:
 - After fnishing one cluster finding the next start vertex is a linear
   search on Visited. This does not scale.
 - Having a hit counter for each vertex lets one detect cycles easily
 - Putting the hit counter in a heap make the whole this scale better

 *Note:* To do cycle detection on /undirected/ graphs one must not
 count a hit when gonig v0 -> v1 -> v0. And of course loops also!

** DONE Remove DelEdge from WGi32
   :PROPERTIES:
   :ARCHIVE_TIME: 2020-01-05 So 13:13
   :ARCHIVE_FILE: ~/gows/src/git.fractalqb.de/fractalqb/groph/PLAN.org
   :ARCHIVE_CATEGORY: PLAN
   :ARCHIVE_TODO: DONE
   :END:
 =DelEdge= is redundant, one can already use =SetWeight(u, v, nil)=.

